# Generated by Django 5.2.5 on 2025-09-24 08:45

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='BookingAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(unique=True)),
                ('total_bookings', models.PositiveIntegerField(default=0)),
                ('confirmed_bookings', models.PositiveIntegerField(default=0)),
                ('completed_bookings', models.PositiveIntegerField(default=0)),
                ('cancelled_bookings', models.PositiveIntegerField(default=0)),
                ('no_show_bookings', models.PositiveIntegerField(default=0)),
                ('total_revenue', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('platform_fees', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('dealer_payouts', models.DecimalField(decimal_places=2, default=0.0, max_digits=12)),
                ('new_customers', models.PositiveIntegerField(default=0)),
                ('returning_customers', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Booking Analytics',
                'verbose_name_plural': 'Booking Analytics',
                'db_table': 'booking_analytics',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='CancellationPolicy',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('free_cancellation_hours', models.PositiveIntegerField(default=24)),
                ('partial_refund_hours', models.PositiveIntegerField(default=12)),
                ('no_refund_hours', models.PositiveIntegerField(default=2)),
                ('partial_refund_percentage', models.DecimalField(decimal_places=2, default=50.0, max_digits=5)),
                ('no_show_penalty_percentage', models.DecimalField(decimal_places=2, default=100.0, max_digits=5)),
                ('late_cancellation_fee', models.DecimalField(decimal_places=2, default=500.0, max_digits=8)),
                ('is_default', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Cancellation Policy',
                'verbose_name_plural': 'Cancellation Policies',
                'db_table': 'cancellation_policies',
            },
        ),
        migrations.CreateModel(
            name='NotificationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('event_type', models.CharField(choices=[('booking_confirmed', 'Booking Confirmed'), ('booking_cancelled', 'Booking Cancelled'), ('service_reminder', 'Service Reminder'), ('payment_success', 'Payment Success'), ('payout_processed', 'Payout Processed'), ('review_request', 'Review Request')], max_length=50)),
                ('email_subject', models.CharField(blank=True, max_length=255)),
                ('email_body', models.TextField(blank=True)),
                ('sms_message', models.TextField(blank=True)),
                ('push_title', models.CharField(blank=True, max_length=100)),
                ('push_body', models.CharField(blank=True, max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Notification Template',
                'verbose_name_plural': 'Notification Templates',
                'db_table': 'notification_templates',
            },
        ),
        migrations.CreateModel(
            name='Promotion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=50, unique=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('promotion_type', models.CharField(choices=[('percentage', 'Percentage Discount'), ('fixed_amount', 'Fixed Amount Discount'), ('first_booking', 'First Booking Discount'), ('loyalty_points', 'Bonus Loyalty Points')], default='percentage', max_length=30)),
                ('discount_percentage', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('bonus_points', models.PositiveIntegerField(default=0)),
                ('target_audience', models.CharField(choices=[('all', 'All Users'), ('new_users', 'New Users'), ('returning_users', 'Returning Users'), ('vip_users', 'VIP Users')], default='all', max_length=20)),
                ('minimum_order_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('start_date', models.DateTimeField()),
                ('end_date', models.DateTimeField()),
                ('max_uses', models.PositiveIntegerField(blank=True, null=True)),
                ('max_uses_per_user', models.PositiveIntegerField(default=1)),
                ('current_uses', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Promotion',
                'verbose_name_plural': 'Promotions',
                'db_table': 'promotions',
            },
        ),
        migrations.CreateModel(
            name='SubscriptionPlan',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('commission_rate', models.DecimalField(decimal_places=2, default=15.0, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('max_services', models.PositiveIntegerField(default=10)),
                ('featured_listing', models.BooleanField(default=False)),
                ('priority_support', models.BooleanField(default=False)),
                ('analytics_access', models.BooleanField(default=False)),
                ('api_access', models.BooleanField(default=False)),
                ('features', models.JSONField(default=dict, help_text='Additional features configuration')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Subscription Plan',
                'verbose_name_plural': 'Subscription Plans',
                'db_table': 'subscription_plans',
            },
        ),
        migrations.CreateModel(
            name='SystemConfiguration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100, unique=True)),
                ('value', models.TextField()),
                ('description', models.TextField(blank=True)),
                ('data_type', models.CharField(choices=[('string', 'String'), ('integer', 'Integer'), ('float', 'Float'), ('boolean', 'Boolean'), ('json', 'JSON')], default='string', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'System Configuration',
                'verbose_name_plural': 'System Configurations',
                'db_table': 'system_configurations',
            },
        ),
        migrations.CreateModel(
            name='VehicleMake',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True)),
                ('logo', models.ImageField(blank=True, upload_to='vehicle_makes/')),
                ('is_popular', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Vehicle Make',
                'verbose_name_plural': 'Vehicle Makes',
                'db_table': 'vehicle_makes',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='AdminAction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('action_type', models.CharField(choices=[('dealer_approved', 'Dealer Approved'), ('dealer_suspended', 'Dealer Suspended'), ('service_featured', 'Service Featured'), ('payout_processed', 'Payout Processed'), ('promotion_created', 'Promotion Created'), ('document_verified', 'Document Verified')], max_length=50)),
                ('target_model', models.CharField(max_length=50)),
                ('target_id', models.PositiveIntegerField()),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('admin_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Admin Action',
                'verbose_name_plural': 'Admin Actions',
                'db_table': 'admin_actions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Booking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('booking_number', models.CharField(db_index=True, max_length=20, unique=True)),
                ('booking_for', models.CharField(choices=[('self', 'Self'), ('friend', 'Friend'), ('family', 'Family')], default='self', max_length=20)),
                ('contact_name', models.CharField(blank=True, max_length=100)),
                ('contact_phone', models.CharField(blank=True, max_length=15)),
                ('friend_vehicle_info', models.JSONField(blank=True, null=True)),
                ('service_location', models.CharField(choices=[('workshop', 'At Workshop'), ('customer_location', 'At Customer Location')], default='workshop', max_length=20)),
                ('customer_address', models.TextField(blank=True)),
                ('source', models.CharField(choices=[('app', 'Mobile App'), ('external', 'External System')], default='app', max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending Confirmation'), ('confirmed', 'Confirmed'), ('in_progress', 'Service In Progress'), ('completed', 'Completed'), ('cancelled_by_customer', 'Cancelled by Customer'), ('cancelled_by_dealer', 'Cancelled by Dealer'), ('no_show', 'Customer No Show'), ('expired', 'Expired')], default='pending', max_length=30)),
                ('service_amount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('discount_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('tax_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('platform_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('dealer_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('booking_deadline', models.DateTimeField(help_text='Deadline for dealer response')),
                ('service_scheduled_at', models.DateTimeField()),
                ('service_started_at', models.DateTimeField(blank=True, null=True)),
                ('service_completed_at', models.DateTimeField(blank=True, null=True)),
                ('special_instructions', models.TextField(blank=True)),
                ('cancellation_reason', models.TextField(blank=True)),
                ('external_booking_id', models.CharField(blank=True, max_length=100, null=True)),
                ('payment_intent_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookings', to=settings.AUTH_USER_MODEL)),
                ('cancellation_policy', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='cardealing.cancellationpolicy')),
                ('promotion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cardealing.promotion')),
            ],
            options={
                'verbose_name': 'Booking',
                'verbose_name_plural': 'Bookings',
                'db_table': 'bookings',
            },
        ),
        migrations.CreateModel(
            name='BookingStatusHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('old_status', models.CharField(blank=True, max_length=30)),
                ('new_status', models.CharField(max_length=30)),
                ('reason', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='status_history', to='cardealing.booking')),
                ('changed_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Booking Status History',
                'verbose_name_plural': 'Booking Status Histories',
                'db_table': 'booking_status_history',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='CustomerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_of_birth', models.DateField(blank=True, null=True)),
                ('phone_number', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator('^\\+?\\d{10,15}$', 'Invalid phone number format')])),
                ('address', models.TextField(blank=True)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('postal_code', models.CharField(blank=True, max_length=10)),
                ('emergency_contact', models.CharField(blank=True, max_length=15, validators=[django.core.validators.RegexValidator('^\\+?\\d{10,15}$', 'Invalid phone number format')])),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('preferred_notification', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('both', 'Both')], default='email', max_length=20)),
                ('total_bookings', models.PositiveIntegerField(default=0)),
                ('total_spent', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('loyalty_points', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='customer_profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Customer Profile',
                'verbose_name_plural': 'Customer Profiles',
                'db_table': 'customer_profiles',
            },
        ),
        migrations.CreateModel(
            name='DealerProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business_name', models.CharField(max_length=200)),
                ('business_license', models.CharField(max_length=100, unique=True)),
                ('business_type', models.CharField(choices=[('garage', 'Auto Garage'), ('workshop', 'Service Workshop'), ('mobile_service', 'Mobile Service'), ('dealership', 'Car Dealership')], default='garage', max_length=50)),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=10)),
                ('latitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('longitude', models.DecimalField(decimal_places=6, max_digits=9)),
                ('service_radius', models.PositiveIntegerField(default=10, help_text='Service radius in KM')),
                ('business_phone', models.CharField(max_length=20)),
                ('business_email', models.EmailField(blank=True, max_length=254)),
                ('website_url', models.URLField(blank=True)),
                ('bank_account_name', models.CharField(max_length=200)),
                ('bank_account_number', models.CharField(max_length=50, validators=[django.core.validators.RegexValidator('^\\d{8,20}$', 'Invalid bank account number')])),
                ('bank_name', models.CharField(max_length=100)),
                ('bank_routing_number', models.CharField(max_length=20, validators=[django.core.validators.RegexValidator('^\\d{9}$', 'Invalid routing number')])),
                ('commission_percentage', models.DecimalField(decimal_places=2, default=15.0, help_text='Platform commission percentage', max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('is_approved', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_reviews', models.PositiveIntegerField(default=0)),
                ('total_bookings', models.PositiveIntegerField(default=0)),
                ('current_balance', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('business_hours', models.JSONField(default=dict, help_text="Business operating hours in format: {'monday': {'is_open': true, 'start': '09:00', 'end': '18:00'}}")),
                ('has_external_website', models.BooleanField(default=False)),
                ('external_api_url', models.URLField(blank=True, null=True)),
                ('api_key', models.CharField(blank=True, max_length=100, unique=True)),
                ('webhook_url', models.URLField(blank=True, null=True)),
                ('webhook_secret', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='dealer_profile', to=settings.AUTH_USER_MODEL)),
                ('subscription_plan', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cardealing.subscriptionplan')),
            ],
            options={
                'verbose_name': 'Dealer Profile',
                'verbose_name_plural': 'Dealer Profiles',
                'db_table': 'dealer_profiles',
            },
        ),
        migrations.CreateModel(
            name='ExternalIntegration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('api_endpoint', models.URLField()),
                ('api_key', models.CharField(max_length=255)),
                ('webhook_url', models.URLField(blank=True)),
                ('sync_services', models.BooleanField(default=True)),
                ('sync_slots', models.BooleanField(default=True)),
                ('sync_bookings', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('last_sync_at', models.DateTimeField(blank=True, null=True)),
                ('last_sync_status', models.CharField(blank=True, max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dealer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='integrations', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'External Integration',
                'verbose_name_plural': 'External Integrations',
                'db_table': 'external_integrations',
            },
        ),
        migrations.CreateModel(
            name='PayoutRequest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('processing_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('net_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('bank_details', models.JSONField(help_text='Bank account details for payout')),
                ('admin_notes', models.TextField(blank=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('transaction_reference', models.CharField(blank=True, max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dealer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payout_requests', to=settings.AUTH_USER_MODEL)),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_payouts', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Payout Request',
                'verbose_name_plural': 'Payout Requests',
                'db_table': 'payout_requests',
            },
        ),
        migrations.CreateModel(
            name='BalanceTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('transaction_type', models.CharField(choices=[('booking', 'Booking Completion'), ('payout', 'Payout'), ('refund', 'Refund'), ('adjustment', 'Manual Adjustment'), ('commission_adjustment', 'Commission Adjustment')], max_length=25)),
                ('description', models.TextField(blank=True)),
                ('balance_before', models.DecimalField(decimal_places=2, max_digits=10)),
                ('balance_after', models.DecimalField(decimal_places=2, max_digits=10)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('related_booking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cardealing.booking')),
                ('dealer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='balance_transactions', to='cardealing.dealerprofile')),
                ('related_payout', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cardealing.payoutrequest')),
            ],
            options={
                'verbose_name': 'Balance Transaction',
                'verbose_name_plural': 'Balance Transactions',
                'db_table': 'balance_transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LoyaltyTransaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('transaction_type', models.CharField(choices=[('earned', 'Points Earned'), ('redeemed', 'Points Redeemed'), ('expired', 'Points Expired'), ('bonus', 'Bonus Points'), ('adjustment', 'Manual Adjustment')], max_length=20)),
                ('points', models.IntegerField(help_text='Can be negative for redemptions')),
                ('description', models.CharField(max_length=255)),
                ('balance_before', models.PositiveIntegerField()),
                ('balance_after', models.PositiveIntegerField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='loyalty_transactions', to=settings.AUTH_USER_MODEL)),
                ('related_booking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cardealing.booking')),
                ('related_promotion', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cardealing.promotion')),
            ],
            options={
                'verbose_name': 'Loyalty Transaction',
                'verbose_name_plural': 'Loyalty Transactions',
                'db_table': 'loyalty_transactions',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('overall_rating', models.PositiveIntegerField(choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')])),
                ('service_quality', models.PositiveIntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], null=True)),
                ('punctuality', models.PositiveIntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], null=True)),
                ('value_for_money', models.PositiveIntegerField(blank=True, choices=[(1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5')], null=True)),
                ('title', models.CharField(blank=True, max_length=200)),
                ('comment', models.TextField(blank=True)),
                ('photos', models.JSONField(blank=True, default=list, help_text='List of photo URLs')),
                ('is_published', models.BooleanField(default=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('dealer_response', models.TextField(blank=True)),
                ('dealer_response_date', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('booking', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='cardealing.booking')),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='given_reviews', to=settings.AUTH_USER_MODEL)),
                ('dealer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='received_reviews', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Review',
                'verbose_name_plural': 'Reviews',
                'db_table': 'reviews',
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('short_description', models.CharField(blank=True, max_length=255)),
                ('base_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('discounted_price', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('estimated_duration', models.PositiveIntegerField(help_text='Duration in minutes')),
                ('max_concurrent_slots', models.PositiveIntegerField(default=1, help_text='Max simultaneous bookings')),
                ('supported_fuel_types', models.JSONField(default=list)),
                ('min_year', models.PositiveIntegerField(blank=True, null=True)),
                ('max_year', models.PositiveIntegerField(blank=True, null=True)),
                ('advance_booking_hours', models.PositiveIntegerField(default=2)),
                ('cancellation_hours', models.PositiveIntegerField(default=24)),
                ('includes', models.JSONField(default=list, help_text="What's included in service")),
                ('requirements', models.JSONField(default=list, help_text='Customer requirements')),
                ('service_location', models.CharField(choices=[('workshop', 'At Workshop'), ('customer_location', 'At Customer Location'), ('both', 'Both Available')], default='workshop', max_length=20)),
                ('is_active', models.BooleanField(default=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('external_service_id', models.CharField(blank=True, max_length=100, null=True)),
                ('sync_with_external', models.BooleanField(default=False)),
                ('total_bookings', models.PositiveIntegerField(default=0)),
                ('view_count', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dealer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='services', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
                'db_table': 'services',
            },
        ),
        migrations.AddField(
            model_name='promotion',
            name='applicable_services',
            field=models.ManyToManyField(blank=True, to='cardealing.service'),
        ),
        migrations.CreateModel(
            name='ServiceAddon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('is_required', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addons', to='cardealing.service')),
            ],
            options={
                'verbose_name': 'Service Addon',
                'verbose_name_plural': 'Service Addons',
                'db_table': 'service_addons',
            },
        ),
        migrations.CreateModel(
            name='BookingAddon',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('unit_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('booking', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addons', to='cardealing.booking')),
                ('addon', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cardealing.serviceaddon')),
            ],
            options={
                'verbose_name': 'Booking Addon',
                'verbose_name_plural': 'Booking Addons',
                'db_table': 'booking_addons',
            },
        ),
        migrations.CreateModel(
            name='ServiceCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
                ('icon', models.ImageField(blank=True, upload_to='category_icons/')),
                ('sort_order', models.PositiveIntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('estimated_duration', models.PositiveIntegerField(default=60, help_text='Default duration in minutes')),
                ('requires_vehicle_drop', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cardealing.servicecategory')),
            ],
            options={
                'verbose_name': 'Service Category',
                'verbose_name_plural': 'Service Categories',
                'db_table': 'service_categories',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.AddField(
            model_name='service',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cardealing.servicecategory'),
        ),
        migrations.AddField(
            model_name='promotion',
            name='applicable_categories',
            field=models.ManyToManyField(blank=True, to='cardealing.servicecategory'),
        ),
        migrations.CreateModel(
            name='ServiceSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('total_capacity', models.PositiveIntegerField(default=1, help_text='Total slots available')),
                ('available_capacity', models.PositiveIntegerField(default=1, help_text='Currently available slots')),
                ('custom_price', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_blocked', models.BooleanField(default=False, help_text='Manually blocked by dealer')),
                ('block_reason', models.CharField(blank=True, max_length=255)),
                ('external_slot_id', models.CharField(blank=True, max_length=100, null=True)),
                ('sync_with_external', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='slots', to='cardealing.service')),
            ],
            options={
                'verbose_name': 'Service Slot',
                'verbose_name_plural': 'Service Slots',
                'db_table': 'service_slots',
            },
        ),
        migrations.AddField(
            model_name='booking',
            name='service_slot',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cardealing.serviceslot'),
        ),
        migrations.CreateModel(
            name='SupportTicket',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ticket_number', models.CharField(db_index=True, max_length=20, unique=True)),
                ('subject', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('category', models.CharField(choices=[('booking_issue', 'Booking Issue'), ('payment_problem', 'Payment Problem'), ('account_issue', 'Account Issue'), ('service_issue', 'Service Issue'), ('other', 'Other')], default='other', max_length=50)),
                ('status', models.CharField(choices=[('open', 'Open'), ('in_progress', 'In Progress'), ('resolved', 'Resolved'), ('closed', 'Closed')], default='open', max_length=20)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('resolved_at', models.DateTimeField(blank=True, null=True)),
                ('assigned_to', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='assigned_tickets', to=settings.AUTH_USER_MODEL)),
                ('related_booking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='support_tickets', to='cardealing.booking')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_tickets', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Support Ticket',
                'verbose_name_plural': 'Support Tickets',
                'db_table': 'support_tickets',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='SupportMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', models.TextField()),
                ('attachment', models.FileField(blank=True, null=True, upload_to='support_attachments/')),
                ('is_read', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='support_messages', to=settings.AUTH_USER_MODEL)),
                ('ticket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages', to='cardealing.supportticket')),
            ],
            options={
                'verbose_name': 'Support Message',
                'verbose_name_plural': 'Support Messages',
                'db_table': 'support_messages',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='SyncLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sync_type', models.CharField(choices=[('service_push', 'Service Push'), ('service_pull', 'Service Pull'), ('slot_push', 'Slot Push'), ('slot_pull', 'Slot Pull'), ('booking_push', 'Booking Push'), ('booking_pull', 'Booking Pull')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('success', 'Success'), ('failed', 'Failed'), ('partial', 'Partial Success')], max_length=20)),
                ('request_data', models.JSONField(blank=True, null=True)),
                ('response_data', models.JSONField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('records_processed', models.PositiveIntegerField(default=0)),
                ('execution_time_ms', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('integration', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sync_logs', to='cardealing.externalintegration')),
            ],
            options={
                'verbose_name': 'Sync Log',
                'verbose_name_plural': 'Sync Logs',
                'db_table': 'sync_logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Technician',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('phone_number', models.CharField(blank=True, max_length=15)),
                ('expertise', models.JSONField(default=list, help_text='List of service categories technician can handle')),
                ('is_available', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dealer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='technicians', to='cardealing.dealerprofile')),
            ],
            options={
                'verbose_name': 'Technician',
                'verbose_name_plural': 'Technicians',
                'db_table': 'technicians',
            },
        ),
        migrations.AddField(
            model_name='serviceslot',
            name='assigned_technician',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cardealing.technician'),
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year', models.PositiveIntegerField()),
                ('color', models.CharField(blank=True, max_length=30)),
                ('license_plate', models.CharField(max_length=20, unique=True)),
                ('vin', models.CharField(blank=True, max_length=17, unique=True)),
                ('fuel_type', models.CharField(choices=[('petrol', 'Petrol'), ('diesel', 'Diesel'), ('electric', 'Electric'), ('hybrid', 'Hybrid'), ('cng', 'CNG')], max_length=20)),
                ('transmission', models.CharField(blank=True, choices=[('manual', 'Manual'), ('automatic', 'Automatic')], max_length=20)),
                ('engine_cc', models.PositiveIntegerField(blank=True, null=True)),
                ('current_mileage', models.PositiveIntegerField(blank=True, null=True)),
                ('is_primary', models.BooleanField(default=False)),
                ('is_active', models.BooleanField(default=True)),
                ('last_service_date', models.DateField(blank=True, null=True)),
                ('next_service_due', models.DateField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='vehicles', to=settings.AUTH_USER_MODEL)),
                ('make', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cardealing.vehiclemake')),
            ],
            options={
                'verbose_name': 'Vehicle',
                'verbose_name_plural': 'Vehicles',
                'db_table': 'vehicles',
            },
        ),
        migrations.AddField(
            model_name='booking',
            name='vehicle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cardealing.vehicle'),
        ),
        migrations.AddField(
            model_name='service',
            name='supported_makes',
            field=models.ManyToManyField(blank=True, to='cardealing.vehiclemake'),
        ),
        migrations.CreateModel(
            name='VehicleModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('year_from', models.PositiveIntegerField()),
                ('year_to', models.PositiveIntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('make', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='models', to='cardealing.vehiclemake')),
            ],
            options={
                'verbose_name': 'Vehicle Model',
                'verbose_name_plural': 'Vehicle Models',
                'db_table': 'vehicle_models',
                'ordering': ['make__name', 'name'],
            },
        ),
        migrations.AddField(
            model_name='vehicle',
            name='model',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='cardealing.vehiclemodel'),
        ),
        migrations.CreateModel(
            name='VirtualCard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('card_number', models.CharField(max_length=16, unique=True, validators=[django.core.validators.RegexValidator('^\\d{16}$', 'Invalid card number')])),
                ('last_four_digits', models.CharField(max_length=4)),
                ('expiry_date', models.CharField(max_length=5)),
                ('balance', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('is_active', models.BooleanField(default=True)),
                ('external_card_id', models.CharField(blank=True, max_length=100, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dealer', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='virtual_card', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Virtual Card',
                'verbose_name_plural': 'Virtual Cards',
                'db_table': 'virtual_cards',
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_payment_intent_id', models.CharField(blank=True, max_length=100, unique=True)),
                ('stripe_charge_id', models.CharField(blank=True, max_length=100)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=8)),
                ('currency', models.CharField(default='BDT', max_length=3)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('succeeded', 'Succeeded'), ('failed', 'Failed'), ('canceled', 'Canceled'), ('refunded', 'Refunded'), ('partially_refunded', 'Partially Refunded')], default='pending', max_length=20)),
                ('payment_method_type', models.CharField(choices=[('customer_card', 'Customer Card'), ('virtual_card', 'Dealer Virtual Card'), ('mobile_banking', 'Mobile Banking'), ('bank_transfer', 'Bank Transfer'), ('external', 'External Payment')], default='customer_card', max_length=50)),
                ('payment_method_details', models.JSONField(blank=True, null=True)),
                ('gateway_response', models.JSONField(blank=True, null=True)),
                ('authorized_at', models.DateTimeField(blank=True, null=True)),
                ('captured_at', models.DateTimeField(blank=True, null=True)),
                ('failed_at', models.DateTimeField(blank=True, null=True)),
                ('refund_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('refunded_at', models.DateTimeField(blank=True, null=True)),
                ('failure_code', models.CharField(blank=True, max_length=50)),
                ('failure_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('booking', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='payment', to='cardealing.booking')),
                ('virtual_card', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cardealing.virtualcard')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'db_table': 'payments',
            },
        ),
        migrations.CreateModel(
            name='WebhookEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('service.created', 'Service Created'), ('service.updated', 'Service Updated'), ('service.deleted', 'Service Deleted'), ('slot.created', 'Slot Created'), ('slot.updated', 'Slot Updated'), ('slot.deleted', 'Slot Deleted'), ('booking.created', 'Booking Created'), ('booking.updated', 'Booking Updated'), ('booking.cancelled', 'Booking Cancelled')], max_length=50)),
                ('event_data', models.JSONField()),
                ('external_id', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('error_message', models.TextField(blank=True)),
                ('retry_count', models.PositiveIntegerField(default=0)),
                ('max_retries', models.PositiveIntegerField(default=3)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('dealer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webhook_events', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Webhook Event',
                'verbose_name_plural': 'Webhook Events',
                'db_table': 'webhook_events',
            },
        ),
        migrations.CreateModel(
            name='CustomerVerification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('verification_type', models.CharField(choices=[('phone', 'Phone OTP'), ('email', 'Email Verification'), ('national_id', 'National ID')], max_length=20)),
                ('token', models.CharField(blank=True, max_length=100)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('verified', 'Verified'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Customer Verification',
                'verbose_name_plural': 'Customer Verifications',
                'db_table': 'customer_verifications',
                'indexes': [models.Index(fields=['user'], name='customer_ve_user_id_4393ac_idx'), models.Index(fields=['status'], name='customer_ve_status_f2c8e6_idx')],
                'unique_together': {('user', 'verification_type')},
            },
        ),
        migrations.CreateModel(
            name='DealerAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('total_bookings', models.PositiveIntegerField(default=0)),
                ('completed_bookings', models.PositiveIntegerField(default=0)),
                ('cancelled_bookings', models.PositiveIntegerField(default=0)),
                ('no_show_bookings', models.PositiveIntegerField(default=0)),
                ('total_earnings', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('platform_fees_paid', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('new_reviews', models.PositiveIntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('dealer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dealer Analytics',
                'verbose_name_plural': 'Dealer Analytics',
                'db_table': 'dealer_analytics',
                'ordering': ['-date'],
                'unique_together': {('dealer', 'date')},
            },
        ),
        migrations.CreateModel(
            name='DealerPayout',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('processing_fee', models.DecimalField(decimal_places=2, default=0.0, max_digits=8)),
                ('net_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('approved', 'Approved'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('bank_details', models.JSONField(help_text="Bank account details for payout (e.g., {'account_number': 'xxx', 'bank_name': 'xxx'})")),
                ('admin_notes', models.TextField(blank=True)),
                ('processed_at', models.DateTimeField(blank=True, null=True)),
                ('transaction_reference', models.CharField(blank=True, max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('dealer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='payouts', to=settings.AUTH_USER_MODEL)),
                ('processed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='processed_dealer_payouts', to=settings.AUTH_USER_MODEL)),
                ('related_bookings', models.ManyToManyField(blank=True, related_name='payouts', to='cardealing.booking')),
            ],
            options={
                'verbose_name': 'Dealer Payout',
                'verbose_name_plural': 'Dealer Payouts',
                'db_table': 'dealer_payouts',
                'indexes': [models.Index(fields=['dealer'], name='dealer_payo_dealer__977868_idx'), models.Index(fields=['status'], name='dealer_payo_status_6add15_idx'), models.Index(fields=['transaction_reference'], name='dealer_payo_transac_12f0b5_idx')],
            },
        ),
        migrations.CreateModel(
            name='CommissionHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('commission_percentage', models.DecimalField(decimal_places=2, max_digits=5)),
                ('effective_date', models.DateTimeField()),
                ('reason', models.TextField(blank=True, help_text='Reason for commission change')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('dealer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commission_history', to='cardealing.dealerprofile')),
            ],
            options={
                'verbose_name': 'Commission History',
                'verbose_name_plural': 'Commission Histories',
                'db_table': 'commission_history',
                'indexes': [models.Index(fields=['dealer'], name='commission__dealer__ba9085_idx'), models.Index(fields=['effective_date'], name='commission__effecti_faf357_idx')],
            },
        ),
        migrations.CreateModel(
            name='DealerVerificationDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('trade_license', 'Trade License'), ('business_registration', 'Business Registration Certificate'), ('national_id', 'National ID (NID)'), ('tin_certificate', 'TIN Certificate'), ('address_proof', 'Proof of Business Address')], max_length=50)),
                ('document_file', models.FileField(upload_to='dealer_verification_documents/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('pending', 'Pending Review'), ('approved', 'Approved'), ('rejected', 'Rejected')], default='pending', max_length=20)),
                ('admin_notes', models.TextField(blank=True)),
                ('reviewed_at', models.DateTimeField(blank=True, null=True)),
                ('dealer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='verification_documents', to='cardealing.dealerprofile')),
                ('reviewed_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviewed_documents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Dealer Verification Document',
                'verbose_name_plural': 'Dealer Verification Documents',
                'db_table': 'dealer_verification_documents',
                'indexes': [models.Index(fields=['dealer'], name='dealer_veri_dealer__7f3246_idx'), models.Index(fields=['document_type'], name='dealer_veri_documen_ff7982_idx'), models.Index(fields=['status'], name='dealer_veri_status_fa5af4_idx')],
                'unique_together': {('dealer', 'document_type')},
            },
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('message', models.TextField()),
                ('channel', models.CharField(choices=[('email', 'Email'), ('sms', 'SMS'), ('push', 'Push Notification')], max_length=20)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('failed', 'Failed')], default='pending', max_length=20)),
                ('sent_at', models.DateTimeField(blank=True, null=True)),
                ('read_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL)),
                ('related_booking', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cardealing.booking')),
                ('template', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='cardealing.notificationtemplate')),
            ],
            options={
                'verbose_name': 'Notification',
                'verbose_name_plural': 'Notifications',
                'db_table': 'notifications',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['recipient'], name='notificatio_recipie_1dd18d_idx'), models.Index(fields=['status'], name='notificatio_status_fce6f5_idx'), models.Index(fields=['channel'], name='notificatio_channel_d2a579_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='payoutrequest',
            index=models.Index(fields=['dealer'], name='payout_requ_dealer__d0f685_idx'),
        ),
        migrations.AddIndex(
            model_name='payoutrequest',
            index=models.Index(fields=['status'], name='payout_requ_status_75a6f8_idx'),
        ),
        migrations.AddIndex(
            model_name='payoutrequest',
            index=models.Index(fields=['created_at'], name='payout_requ_created_f39fd2_idx'),
        ),
        migrations.AddIndex(
            model_name='balancetransaction',
            index=models.Index(fields=['dealer'], name='balance_tra_dealer__32bff1_idx'),
        ),
        migrations.AddIndex(
            model_name='balancetransaction',
            index=models.Index(fields=['transaction_type'], name='balance_tra_transac_c4cf0c_idx'),
        ),
        migrations.AddIndex(
            model_name='balancetransaction',
            index=models.Index(fields=['created_at'], name='balance_tra_created_240890_idx'),
        ),
        migrations.AddIndex(
            model_name='loyaltytransaction',
            index=models.Index(fields=['customer'], name='loyalty_tra_custome_738128_idx'),
        ),
        migrations.AddIndex(
            model_name='loyaltytransaction',
            index=models.Index(fields=['transaction_type'], name='loyalty_tra_transac_055808_idx'),
        ),
        migrations.AddIndex(
            model_name='loyaltytransaction',
            index=models.Index(fields=['created_at'], name='loyalty_tra_created_6e8e0e_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['dealer'], name='reviews_dealer__db19b6_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['overall_rating'], name='reviews_overall_fa1e40_idx'),
        ),
        migrations.AddIndex(
            model_name='review',
            index=models.Index(fields=['is_published'], name='reviews_is_publ_5b7190_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('customer', 'booking')},
        ),
        migrations.AlterUniqueTogether(
            name='bookingaddon',
            unique_together={('booking', 'addon')},
        ),
        migrations.AddIndex(
            model_name='promotion',
            index=models.Index(fields=['code'], name='promotions_code_893bd9_idx'),
        ),
        migrations.AddIndex(
            model_name='promotion',
            index=models.Index(fields=['is_active'], name='promotions_is_acti_5031c3_idx'),
        ),
        migrations.AddIndex(
            model_name='dealerprofile',
            index=models.Index(fields=['is_approved', 'is_active'], name='dealer_prof_is_appr_b467bc_idx'),
        ),
        migrations.AddIndex(
            model_name='dealerprofile',
            index=models.Index(fields=['city', 'is_active'], name='dealer_prof_city_f76648_idx'),
        ),
        migrations.AddIndex(
            model_name='dealerprofile',
            index=models.Index(fields=['rating', '-total_reviews'], name='dealer_prof_rating_b936a2_idx'),
        ),
        migrations.AddIndex(
            model_name='supportticket',
            index=models.Index(fields=['ticket_number'], name='support_tic_ticket__441438_idx'),
        ),
        migrations.AddIndex(
            model_name='supportticket',
            index=models.Index(fields=['status'], name='support_tic_status_ac1ffd_idx'),
        ),
        migrations.AddIndex(
            model_name='supportticket',
            index=models.Index(fields=['priority'], name='support_tic_priorit_3536fa_idx'),
        ),
        migrations.AddIndex(
            model_name='supportticket',
            index=models.Index(fields=['user'], name='support_tic_user_id_f7e679_idx'),
        ),
        migrations.AddIndex(
            model_name='supportmessage',
            index=models.Index(fields=['ticket'], name='support_mes_ticket__71be42_idx'),
        ),
        migrations.AddIndex(
            model_name='supportmessage',
            index=models.Index(fields=['sender'], name='support_mes_sender__aaf0c3_idx'),
        ),
        migrations.AddIndex(
            model_name='technician',
            index=models.Index(fields=['dealer'], name='technicians_dealer__3a8b7d_idx'),
        ),
        migrations.AddIndex(
            model_name='technician',
            index=models.Index(fields=['is_available'], name='technicians_is_avai_41e74c_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceslot',
            index=models.Index(fields=['service', 'date', 'start_time'], name='service_slo_service_94e8ad_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceslot',
            index=models.Index(fields=['date', 'is_active'], name='service_slo_date_89eac0_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceslot',
            index=models.Index(fields=['external_slot_id'], name='service_slo_externa_7ee59f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='serviceslot',
            unique_together={('service', 'date', 'start_time')},
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['booking_number'], name='bookings_booking_502bea_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['customer', 'status'], name='bookings_custome_b789e2_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['status', 'created_at'], name='bookings_status_8f492c_idx'),
        ),
        migrations.AddIndex(
            model_name='booking',
            index=models.Index(fields=['source'], name='bookings_source_2e1530_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['dealer', 'is_active'], name='services_dealer__ee2fb7_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['category', 'is_active'], name='services_categor_6a9f2f_idx'),
        ),
        migrations.AddIndex(
            model_name='service',
            index=models.Index(fields=['external_service_id'], name='services_externa_e45bcd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='vehiclemodel',
            unique_together={('make', 'name')},
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['owner'], name='vehicles_owner_i_b73183_idx'),
        ),
        migrations.AddIndex(
            model_name='vehicle',
            index=models.Index(fields=['license_plate'], name='vehicles_license_b08e3c_idx'),
        ),
        migrations.AddIndex(
            model_name='virtualcard',
            index=models.Index(fields=['dealer'], name='virtual_car_dealer__77bba6_idx'),
        ),
        migrations.AddIndex(
            model_name='virtualcard',
            index=models.Index(fields=['card_number'], name='virtual_car_card_nu_3b3697_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['stripe_payment_intent_id'], name='payments_stripe__6cb0ea_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['status'], name='payments_status_d621e5_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['payment_method_type'], name='payments_payment_c9efaa_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookevent',
            index=models.Index(fields=['dealer'], name='webhook_eve_dealer__e85e71_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookevent',
            index=models.Index(fields=['event_type'], name='webhook_eve_event_t_1d3d5d_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookevent',
            index=models.Index(fields=['status'], name='webhook_eve_status_330e1f_idx'),
        ),
        migrations.AddIndex(
            model_name='webhookevent',
            index=models.Index(fields=['created_at'], name='webhook_eve_created_8fa52f_idx'),
        ),
    ]
