# Generated by Django 5.2.6 on 2025-10-04 05:41

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('cardealing', '0004_slottemplate_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AvailableSlot',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.CharField(max_length=200)),
                ('dealer_name', models.CharField(max_length=200)),
                ('category_name', models.CharField(max_length=100)),
                ('date', models.DateField(db_index=True)),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('day_of_week', models.PositiveSmallIntegerField()),
                ('available_capacity', models.PositiveIntegerField()),
                ('total_capacity', models.PositiveIntegerField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=8)),
                ('city', models.CharField(blank=True, max_length=100)),
                ('last_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Available Slot',
                'verbose_name_plural': 'Available Slots',
                'db_table': 'available_slots',
                'ordering': ['date', 'start_time'],
            },
        ),
        migrations.AlterModelOptions(
            name='serviceslot',
            options={'ordering': ['date', 'start_time'], 'verbose_name': 'Service Slot', 'verbose_name_plural': 'Service Slots'},
        ),
        migrations.AlterModelOptions(
            name='slottemplate',
            options={'ordering': ['service', 'day_of_week', 'start_time'], 'verbose_name': 'Slot Template', 'verbose_name_plural': 'Slot Templates'},
        ),
        migrations.RemoveIndex(
            model_name='dealerprofile',
            name='dealer_prof_city_f76648_idx',
        ),
        migrations.RemoveIndex(
            model_name='dealerprofile',
            name='dealer_prof_rating_b936a2_idx',
        ),
        migrations.RemoveIndex(
            model_name='serviceslot',
            name='service_slo_service_94e8ad_idx',
        ),
        migrations.RemoveIndex(
            model_name='serviceslot',
            name='service_slo_date_89eac0_idx',
        ),
        migrations.RemoveIndex(
            model_name='serviceslot',
            name='service_slo_is_gene_5baf0e_idx',
        ),
        migrations.RemoveField(
            model_name='serviceslot',
            name='assigned_technician',
        ),
        migrations.RemoveField(
            model_name='serviceslot',
            name='external_slot_id',
        ),
        migrations.RemoveField(
            model_name='serviceslot',
            name='generation_notes',
        ),
        migrations.RemoveField(
            model_name='serviceslot',
            name='is_generated_from_template',
        ),
        migrations.RemoveField(
            model_name='serviceslot',
            name='sync_with_external',
        ),
        migrations.RemoveField(
            model_name='slottemplate',
            name='buffer_between_slots',
        ),
        migrations.RemoveField(
            model_name='slottemplate',
            name='slots_per_session',
        ),
        migrations.RemoveField(
            model_name='slottemplate',
            name='total_capacity',
        ),
        migrations.AddField(
            model_name='serviceslot',
            name='is_generated',
            field=models.BooleanField(default=False, help_text='Was this slot generated from a template?'),
        ),
        migrations.AddField(
            model_name='slottemplate',
            name='buffer_time',
            field=models.PositiveIntegerField(default=0, help_text='Buffer time between slots in minutes (0-120)', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(120)]),
        ),
        migrations.AddField(
            model_name='slottemplate',
            name='capacity_per_slot',
            field=models.PositiveIntegerField(default=1, help_text='How many bookings can be accepted per slot', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(50)]),
        ),
        migrations.AlterField(
            model_name='dealerprofile',
            name='address',
            field=models.TextField(blank=True),
        ),
        migrations.AlterField(
            model_name='dealerprofile',
            name='api_key',
            field=models.CharField(blank=True, editable=False, max_length=100),
        ),
        migrations.AlterField(
            model_name='dealerprofile',
            name='bank_account_name',
            field=models.CharField(blank=True, max_length=200),
        ),
        migrations.AlterField(
            model_name='dealerprofile',
            name='bank_account_number',
            field=models.CharField(blank=True, max_length=50),
        ),
        migrations.AlterField(
            model_name='dealerprofile',
            name='bank_name',
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.AlterField(
            model_name='dealerprofile',
            name='bank_routing_number',
            field=models.CharField(blank=True, max_length=20),
        ),
        migrations.AlterField(
            model_name='dealerprofile',
            name='business_hours',
            field=models.JSONField(blank=True, default=dict, help_text='Business operating hours'),
        ),
        migrations.AlterField(
            model_name='dealerprofile',
            name='business_license',
            field=models.CharField(blank=True, max_length=100, null=True),
        ),
        migrations.AlterField(
            model_name='dealerprofile',
            name='business_phone',
            field=models.CharField(blank=True, max_length=20),
        ),
        migrations.AlterField(
            model_name='dealerprofile',
            name='business_type',
            field=models.CharField(blank=True, choices=[('garage', 'Auto Garage'), ('workshop', 'Service Workshop'), ('mobile_service', 'Mobile Service'), ('dealership', 'Car Dealership')], default='garage', max_length=50),
        ),
        migrations.AlterField(
            model_name='dealerprofile',
            name='city',
            field=models.CharField(blank=True, max_length=100),
        ),
        migrations.AlterField(
            model_name='dealerprofile',
            name='current_balance',
            field=models.DecimalField(decimal_places=2, default=0.0, editable=False, max_digits=10),
        ),
        migrations.AlterField(
            model_name='dealerprofile',
            name='latitude',
            field=models.DecimalField(blank=True, decimal_places=6, max_digits=20, null=True),
        ),
        migrations.AlterField(
            model_name='dealerprofile',
            name='longitude',
            field=models.DecimalField(blank=True, decimal_places=6, max_digits=20, null=True),
        ),
        migrations.AlterField(
            model_name='dealerprofile',
            name='postal_code',
            field=models.CharField(blank=True, max_length=10),
        ),
        migrations.AlterField(
            model_name='dealerprofile',
            name='rating',
            field=models.DecimalField(decimal_places=2, default=0.0, editable=False, max_digits=3),
        ),
        migrations.AlterField(
            model_name='dealerprofile',
            name='service_radius',
            field=models.PositiveIntegerField(blank=True, default=10, help_text='Service radius in KM'),
        ),
        migrations.AlterField(
            model_name='dealerprofile',
            name='total_bookings',
            field=models.PositiveIntegerField(default=0, editable=False),
        ),
        migrations.AlterField(
            model_name='dealerprofile',
            name='total_reviews',
            field=models.PositiveIntegerField(default=0, editable=False),
        ),
        migrations.AlterField(
            model_name='serviceslot',
            name='available_capacity',
            field=models.PositiveIntegerField(default=1, help_text='Currently available bookings', validators=[django.core.validators.MinValueValidator(0)]),
        ),
        migrations.AlterField(
            model_name='serviceslot',
            name='block_reason',
            field=models.CharField(blank=True, help_text='Reason for blocking this slot', max_length=255),
        ),
        migrations.AlterField(
            model_name='serviceslot',
            name='custom_price',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Override service base price for this slot', max_digits=8, null=True),
        ),
        migrations.AlterField(
            model_name='serviceslot',
            name='date',
            field=models.DateField(db_index=True),
        ),
        migrations.AlterField(
            model_name='serviceslot',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Active slots can be booked'),
        ),
        migrations.AlterField(
            model_name='serviceslot',
            name='is_blocked',
            field=models.BooleanField(default=False, help_text='Blocked slots cannot be booked'),
        ),
        migrations.AlterField(
            model_name='serviceslot',
            name='slot_template',
            field=models.ForeignKey(blank=True, help_text='Template that generated this slot (if applicable)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='generated_slots', to='cardealing.slottemplate'),
        ),
        migrations.AlterField(
            model_name='serviceslot',
            name='total_capacity',
            field=models.PositiveIntegerField(default=1, help_text='Total bookings allowed for this slot', validators=[django.core.validators.MinValueValidator(1)]),
        ),
        migrations.AlterField(
            model_name='slottemplate',
            name='custom_price',
            field=models.DecimalField(blank=True, decimal_places=2, help_text='Leave blank to use service base price', max_digits=8, null=True),
        ),
        migrations.AlterField(
            model_name='slottemplate',
            name='day_of_week',
            field=models.PositiveSmallIntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], help_text='Which day of the week this template applies to'),
        ),
        migrations.AlterField(
            model_name='slottemplate',
            name='end_time',
            field=models.TimeField(help_text='When the service window ends'),
        ),
        migrations.AlterField(
            model_name='slottemplate',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Only active templates generate slots'),
        ),
        migrations.AlterField(
            model_name='slottemplate',
            name='name',
            field=models.CharField(help_text='e.g., Morning Shift, Afternoon Shift', max_length=100),
        ),
        migrations.AlterField(
            model_name='slottemplate',
            name='slot_duration',
            field=models.PositiveIntegerField(default=60, help_text='Duration of each slot in minutes (15-480)', validators=[django.core.validators.MinValueValidator(15), django.core.validators.MaxValueValidator(480)]),
        ),
        migrations.AlterField(
            model_name='slottemplate',
            name='start_time',
            field=models.TimeField(help_text='When the service window starts'),
        ),
        migrations.AlterField(
            model_name='slottemplate',
            name='valid_from',
            field=models.DateField(default=django.utils.timezone.now, help_text='Start date for generating slots'),
        ),
        migrations.AlterField(
            model_name='slottemplate',
            name='valid_until',
            field=models.DateField(blank=True, help_text='End date for generating slots (leave blank for indefinite)', null=True),
        ),
        migrations.AddIndex(
            model_name='dealerprofile',
            index=models.Index(fields=['city'], name='dealer_prof_city_c49b48_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceslot',
            index=models.Index(fields=['service', 'date', 'is_active'], name='service_slo_service_6c7b61_idx'),
        ),
        migrations.AddIndex(
            model_name='serviceslot',
            index=models.Index(fields=['date', 'is_active', 'is_blocked'], name='service_slo_date_58ac0e_idx'),
        ),
        migrations.AddIndex(
            model_name='slottemplate',
            index=models.Index(fields=['service', 'is_active'], name='slot_templa_service_bfca36_idx'),
        ),
        migrations.AddIndex(
            model_name='slottemplate',
            index=models.Index(fields=['day_of_week', 'is_active'], name='slot_templa_day_of__f17acf_idx'),
        ),
        migrations.AddField(
            model_name='availableslot',
            name='service',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='available_slots', to='cardealing.service'),
        ),
        migrations.AddField(
            model_name='availableslot',
            name='service_slot',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='availability_record', to='cardealing.serviceslot'),
        ),
        migrations.AddIndex(
            model_name='availableslot',
            index=models.Index(fields=['date', 'city'], name='available_s_date_1f1239_idx'),
        ),
        migrations.AddIndex(
            model_name='availableslot',
            index=models.Index(fields=['service', 'date'], name='available_s_service_f5071c_idx'),
        ),
        migrations.AddIndex(
            model_name='availableslot',
            index=models.Index(fields=['date', 'available_capacity'], name='available_s_date_af1eba_idx'),
        ),
    ]
